{
	"info": {
		"_postman_id": "b50fb8e9-0d35-4326-baaf-2881a8cde5d2",
		"name": "Song management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16671147"
	},
	"item": [
		{
			"name": "Create Role",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 201\", function () {",
							"  pm.response.to.have.status(201);",
							"});",
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"lastRole\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{$randomUserName}}\",\n    \"clearanceLevel\": 2\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Endpoint}}/role/",
					"host": [
						"{{Endpoint}}"
					],
					"path": [
						"role",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"let json = pm.response.json();",
							"let lastRole = pm.environment.get(\"lastRole\")",
							"pm.test(\"Verify that response contains expected role\", function() {",
							"    pm.expect(json.roles[0].id.toString()).eq(lastRole);",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"lastUser\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"roles\": [\n        {{lastRole}}\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Endpoint}}/user/",
					"host": [
						"{{Endpoint}}"
					],
					"path": [
						"user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new song",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"lastSong\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{$randomProductName}}\",\n    \"artist\": \"{{$randomFullName}}\",\n    \"rithm\": \"RAPIDA\",\n    \"linkToTrack\": \"{{$randomUrl}}\",\n    \"linkToYoutube\": \"{{$randomUrl}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Endpoint}}/songs/",
					"host": [
						"{{Endpoint}}"
					],
					"path": [
						"songs",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get recently created song",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Endpoint}}/songs/{{lastSong}}",
					"host": [
						"{{Endpoint}}"
					],
					"path": [
						"songs",
						"{{lastSong}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update recently created song",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify fields are updated\", function() {",
							"    let json = pm.response.json();",
							"    pm.expect(json.name).to.eq(\"Oceanos\");",
							"    pm.expect(json.artist).to.eq(\"Hillsong\");",
							"    pm.expect(json.rithm).to.eq(\"LENTA\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Oceanos\",\n    \"artist\": \"Hillsong\",\n    \"rithm\": \"LENTA\",\n    \"linkToTrack\": \"{{$randomUrl}}\",\n    \"linkToYoutube\": \"{{$randomUrl}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Endpoint}}/songs/{{lastSong}}",
					"host": [
						"{{Endpoint}}"
					],
					"path": [
						"songs",
						"{{lastSong}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all songs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify that response contains at least one element\", function() {",
							"    let json = pm.response.json();",
							"    pm.expect(json.values.length).to.above(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Endpoint}}/songs/?limit=5&activeFilter=all",
					"host": [
						"{{Endpoint}}"
					],
					"path": [
						"songs",
						""
					],
					"query": [
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "activeFilter",
							"value": "all"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete last created song",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{Endpoint}}/songs/{{lastSong}}",
					"host": [
						"{{Endpoint}}"
					],
					"path": [
						"songs",
						"{{lastSong}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all available rithms",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify that response contains at least one element\", function() {",
							"    let json = pm.response.json();",
							"    pm.expect(json.length).to.above(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Endpoint}}/songs/rithms",
					"host": [
						"{{Endpoint}}"
					],
					"path": [
						"songs",
						"rithms"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete last created user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{Endpoint}}/user/{{lastUser}}",
					"host": [
						"{{Endpoint}}"
					],
					"path": [
						"user",
						"{{lastUser}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete last created role",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{Endpoint}}/role/{{lastRole}}",
					"host": [
						"{{Endpoint}}"
					],
					"path": [
						"role",
						"{{lastRole}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{Token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}